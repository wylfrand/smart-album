package com.mycompany.smartalbum.back.controller;import java.util.LinkedHashMap;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletRequest;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.SessionAttributes;import com.mycompany.database.smartalbum.exception.PhotoAlbumException;import com.mycompany.database.smartalbum.model.Album;import com.mycompany.database.smartalbum.model.User;import com.mycompany.filesystem.model.CheckedFile;import com.mycompany.services.smartalbum.infos.ShelfInfos;import com.mycompany.services.smartalbum.vo.form.AlbumVOForm;import com.mycompany.services.utils.Constant;import com.mycompany.services.utils.RetourReponse;import com.mycompany.smartalbum.back.commun.enumeration.MassiveActions;import com.mycompany.smartalbum.back.form.AlbumForm;import com.mycompany.smartalbum.back.form.FileUploadForm;import com.mycompany.smartalbum.back.utils.ViewEnum;@Controller@RequestMapping("/controller")@SessionAttributes(value = { Constant.SMARTALBUM_ALBUM_FORM,		Constant.MENU_CURRENT_PAGE_ATTR, Constant.SMARTALBUM_PHOTOS_CONTROLLER })public class FileUploadController extends ABaseController {	private final static transient Logger log = LoggerFactory			.getLogger(FileUploadController.class);	// Initialisation des fichiers du répertoire temporaire de l'utilisateur	// connecté	@RequestMapping(value = "/initUploadedFiles", method = RequestMethod.GET)	public String initFiles(ModelMap model, HttpServletRequest request,			@ModelAttribute(Constant.SMARTALBUM_ALBUM_FORM) AlbumForm albumForm) {						// Reinitialisation des fichiers selectionnées    	Object objectChecked = backService		.getCacheManager().getObjectFromCache(Constant.SMARTALBUM_CHECKED_PICTURES);    	if(objectChecked != null)    	{    		Map<String, CheckedFile> filesInCache = ((LinkedHashMap<String, CheckedFile>)objectChecked);    		filesInCache.clear();    	}    	    	Set<ShelfInfos> shelvesInfos = convertToListInfos(backService.getCurrentUser(false).getShelves());		albumForm.getUserShelvesInfos().addAll(shelvesInfos);		model.put(Constant.SMARTALBUM_PHOTOS_CONTROLLER,				Constant.SMARTALBUM_PHOTOS_FILEUPLOADCONTROLLER);		backService.getCacheManager().putObjectInCache(				Constant.SMARTALBUM_PHOTOS_CURRENT_ALBUM, null);		backService.getCacheManager().putObjectInCache(				Constant.SMARTALBUM_ALBUM_FORM, albumForm);		return ViewEnum.FILE_UPLOAD_VIEW.getView();	}	/***************************************************	 * URL: /controller/toggleSelect/ toggleSelect(): get the list of selected	 * pictures	 * 	 * @param indexNumber	 *            The index of the selected file	 * @param pageNumber	 *            the page of the selected file	 * @param model	 *            Model attribute to use.	 ***/	@SuppressWarnings("unchecked")	@RequestMapping(value = "/toggleSelect", method = { RequestMethod.POST })	public @ResponseBody void toggleSelect(			@RequestParam("imageName") String imageName,			@RequestParam("imageId") Long imageId, ModelMap model) {		checkedPictures = (LinkedHashMap<String,CheckedFile>) backService.getCacheManager()				.getObjectFromCache(Constant.SMARTALBUM_CHECKED_PICTURES);				CheckedFile checkedFile = checkedPictures.get(imageName);		if (checkedFile != null && checkedPictures.size()>0) {			checkedPictures.remove(checkedFile.getImageName());		}		else{			checkedPictures.put(imageName, new CheckedFile(imageName,imageId));		}	}				/***************************************************	 * URL: /controller/toggleSelect/ toggleSelect(): get the list of selected	 * pictures	 * 	 * @param indexNumber	 *            The index of the selected file	 * @param pageNumber	 *            the page of the selected file	 * @param model	 *            Model attribute to use.	 * @throws PhotoAlbumException 	 ***/	@RequestMapping(value = "/massiveAction", method = { RequestMethod.POST })	public @ResponseBody RetourReponse massiveAction(			@RequestParam("action") String action,			@ModelAttribute(Constant.SMARTALBUM_ALBUM_FORM) AlbumForm form,			ModelMap model) throws PhotoAlbumException {				MassiveActions currentAction = MassiveActions.fromValue(action);		RetourReponse retour = new RetourReponse();		switch (currentAction) {		case REMOVE_SELECTED:			backService.removeSelectedFilesByName(true);			break;		case REMOVE_ALL:			backService.removeAllPicturesFromCurrentAlbum();			break;		case TOOGLE_SELECT_ALL:			backService.toogleSelectAllFiles();			break;		case MODIFY_ALBUM:			Album album = (Album)backService.getCacheManager().getObjectFromCache(Constant.SMARTALBUM_PHOTOS_CURRENT_ALBUM);			AlbumVOForm albumvo = backService.findAlbumFormById(String.valueOf(album.getId()));			FileUploadForm uploadForm = getFileUploadFormFromSelectedFiles(form,getSelectedPictures(),albumvo, false);			uploadForm.setSelectedAlbumName(album.getName());			uploadForm.setSelectedAlbumDescription(album.getDescription());			uploadForm.setSelectedAlbumShelf(album.getShelf().getId()+"");			User user = backService.getCurrentUser(false);			uploadForm.getUserShelvesInfos().addAll(convertToListInfos(user.getShelves()));			retour.setResultObject(uploadForm);			break;		case CREATE_ALBUM:			retour.setResultObject(getFileUploadFormFromSelectedFiles(form,getSelectedPictures(),null, true));			break;		default:			break;		}		return retour;	}	@Override	protected Logger getLoger() {		return log;	}}